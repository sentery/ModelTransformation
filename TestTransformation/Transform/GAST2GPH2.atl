-- @path GPH=/TestTransformation/Metamodel/FlowGraph.ecore
-- @path GAST=/TestTransformation/Metamodel/gastm.ecore

module GAST2GPH2;
create OUT : GPH from IN : GAST;

helper def : allSimpleStatement : Sequence(GAST!SimpleStatement) =  GAST!SimpleStatement.allInstances();
helper context GAST!LocalVariable def: getText : String = 
	self.typeDeclaration.accessedTarget.simpleName +' '+ self.simpleName ;

helper context GAST!GASTExpression def: getText : String = 
	self.toString();

helper context GAST!SimpleStatement def: getText : String = 
--	self.accesses->select(e | e.oclIsTypeOf(GAST!VariableAccess))->collect(c | c.accessedTarget).flatten().first().typeDeclaration.accessedTarget.simpleName +'  '+
--	self.accesses->select(e | e.oclIsTypeOf(GAST!VariableAccess))->collect(c | c.accessedTarget).flatten().first().simpleName;
	if self.accesses.size() > 1 then
	self.accesses->iterate(e; res: String = '' | 
	res+' '+e.accessedTarget.simpleName
--	if not e.accessedTarget.typeDeclaration.oclIsUndefined() then 
--		
--		res+' '+e.accessedTarget.typeDeclaration.accessedTarget.simpleName +' '+e.accessedTarget.simpleName
--	else 
--		res+' '+e.accessedTarget.simpleName
--		endif
	)
		
	else 
		
	self.accesses->collect(c | c.accessedTarget)->iterate(n ; i: Integer = self.accesses.size() | 
		n.typeDeclaration.accessedTarget.simpleName +' '+ n.simpleName )
	
	endif;


--	self.accesses->collect(c | c.accessedTarget)->
--	iterate(n ; i: Integer = self.accesses.size() | if self.accesses.size() <= 1 then 
--			n.typeDeclaration.accessedTarget.simpleName +' '+ n.simpleName 
--		else 
--			n.simpleName 
--			--n.surroundingFunction.localVariables->
--			--iterate(m; j: Integer = n.surroundingFunction.localVariables.size() | n.simpleName
----)
--		endif	
--);
	


rule Method2Method {
	from
		s : GAST!Method
	to 
		t : GPH!Method (
			stmts <- s.body,
			exit <- exit
		),
		
		exit :GPH!Exit(
			txt <- 'Exit'	
		)
		
--		,
--		
--		block : GPH!Block(
--			stmts <- s.body.statements	
--		)
		
		
}

 rule Block2Block {
	from
		s : GAST!BlockStatement
	to 
		t : GPH!Block (
		stmts <- s.statements
		
		
		)
}

rule Loop2Loop {
	from
		s : GAST!LoopStatement
	to 
		t : GPH!Loop (
			txt <-  s.kind.toString()+' '+  s.accesses->iterate(e; res: String = '' | 
			res+' '+e.accessedTarget.simpleName),
			body <- s.body
		)
}
 rule SimStm2SimStm {
	from
		s : GAST!SimpleStatement
	to 
		t : GPH!SimpleStmt (
			txt <- s.getText
		)
		
}
 rule Jump2Return {
	from
		s : GAST!JumpStatement
	to 
		t : GPH!Return (
			txt <- s.kind.toString()+' '+  s.accesses->iterate(e; res: String = '' | 
	res+' '+e.accessedTarget.simpleName)
		)
}
 
 rule Branch2If {
	from
		s : GAST!BranchStatement
	to 
		t : GPH!If (
			txt <-  s.accesses->iterate(e; res: String = '' | 
	res+' '+e.accessedTarget.simpleName),
	then <- s.branch.statement
--	else <- s.branches
--	,
--	else <- s.branches
--	
	
		)
}
