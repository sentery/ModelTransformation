-- @path CFG=/AnalysisCode/Metamodel/CFG.ecore
-- @path GAST=/AnalysisCode/Metamodel/gastm.ecore

module GAST2CFG;
create OUT : CFG from IN : GAST;


helper context GAST!BlockStatement def: getMap() : Map(GAST!Statement, GAST!Statement) =
	self.statements->iterate(e; acc: TupleType(prev: GAST!Statement,map: Map(GAST!Statement, GAST!Statement)) = Tuple{ prev = Sequence {}->first(), map = Map{}} |
	
				Tuple{prev = e, map = if acc.prev.oclIsUndefined() then
									acc.map
								else
									acc.map.including(acc.prev, e)
								endif
												}).map;


helper def: next : Map(GAST!Statement, GAST!Statement) =
       GAST!BlockStatement.allInstances()->asSequence()->iterate(e; acc : Map(GAST!Statement, GAST!Statement) = Map {} |
               acc.union(e.getMap())
       );

helper context GAST!Statement def: next : GAST!Statement =
	thisModule.next.get(self);

--------------------------------------------------------------------------------------



helper context GAST!VariableAccess def: isExist(var : GAST!LocalVariable) : Boolean = 
	self.accessedTarget->select(e | e = var);
	

helper context GAST!Statement def: getDfNext : Sequence(GAST!Statement) =
	
	let stmtList :Sequence(GAST!Statement) =    GAST!Statement.allInstances()->select(r | not r.oclIsKindOf(GAST!BlockStatement))->reject(r1 | r1 = self) in 
	stmtList ->iterate(list; stmt: Sequence(GAST!Statement) = Sequence{} |
	
	list->collect(s | s.accesses->collect(c | if c.accessedTarget.oclIsKindOf(GAST!LocalVariable) then 
		stmt.append(list) 
		else
			false
		endif
	)
));
	
	
--	GAST!Statement.allInstances()->select(r | not r.oclIsKindOf(GAST!BlockStatement))->reject(r1 | r1 = self)
--	->collect(s | s.accesses->collect(c | c.accessedTarget)->select(c2 | 
--		
--		c2 = 	self.accesses->select(e | e.oclIsKindOf(GAST!VariableAccess))->collect(c0 | c0.accessedTarget)
--	->select(c2 | c2.oclIsKindOf(GAST!LocalVariable)).first()
--		
--	));





---------------------------------------------------------------------------------------




abstract rule Statement2Node {
	from
		s : GAST!Statement( not s.oclIsKindOf(GAST!BlockStatement))
	to 
		t : CFG!AbstractNode (
			
--						dataFlow <- s.getDfNext
--			var <- s.accesses->select(e | e.oclIsKindOf(GAST!VariableAccess))->collect(c | c.accessedTarget)->select(e2| e2.oclIsKindOf(GAST!LocalVariable))
		)
}



rule createMCFG {
	from
		s : GAST!Method(not s.body.oclIsUndefined())
	to 
		t : CFG!MControlFlowGraph (
			name <- s.simpleName
			,
			nodes <- if not s.body.oclIsUndefined() then
						s.body.statements
					else s.body
					endif
--					,
--			localVar <- s.localVariables
		)
		
		do {	
--			GAST!Statement.allInstances()->reject(r | r.oclIsKindOf(GAST!BlockStatement))->collect(s | s.accesses->collect(c | c.accessedTarget)->select(c2 | c2.simpleName = 'basePrice')).debug();
--			
--	let stmtList : Sequence (GAST!Statement) = GAST!Statement.allInstances()->reject(r | r.oclIsKindOf(GAST!BlockStatement))
--	
--	in
--	
--	
--	stmtList->collect(s | s.accesses->collect(c | c.accessedTarget)->select(c2 | c2.simpleName = 'basePrice')).debug();
--


		
		}
}

rule LoopStatement extends Statement2Node  {
	from
		s : GAST!LoopStatement
	to 
		t : CFG!IterativeNode (
			trueConditionNode <- s.body.statements.first(),
			falseConditionNode <- s.next,
			name <- s.kind.toString(),
			nodes <-  s.body.statements
			
			
		)
}

rule SimpleStatement extends Statement2Node {
	from
		s : GAST!SimpleStatement
	to 
		t : CFG!Node (
			toNode <-  if s.oclIsUndefined() then 
							s.refImmediateComposite().refImmediateComposite()
						else
							s.next
						endif
						
--						
						,
--						name <- s.accesses->select(e | e.oclIsKindOf(GAST!VariableAccess))->collect(c | c.accessedTarget)
--	->select(c2 | c2.oclIsKindOf(GAST!LocalVariable))->collect(c | c.simpleName )
						dataFlow  <-  s.getDfNext
		)
		
		do {
			s.getDfNext.debug();
--		s.accesses->select(e | e.oclIsKindOf(GAST!VariableAccess))->collect(c | c.accessedTarget)
--	->select(c2 | c2.oclIsKindOf(GAST!LocalVariable))->collect(c | c.simpleName ).debug();
	}
}


rule jumpStatement extends Statement2Node {
	from
		s : GAST!JumpStatement
	to 
		t : CFG!Node (
			toNode <- if s.oclIsUndefined() then 
						s.refImmediateComposite().refImmediateComposite()
						else
							s.next
						endif
		)
}

rule BranchStatement  extends Statement2Node{
	from
		s : GAST!BranchStatement
	to 
		t : CFG!ConditionalNode (
			trueConditionNode <-   s.branches.first().statement,
			falseConditionNode  <-  s.branches.last().statement
			,
			toNode <- s.next
			
			
			
			
		)
	
	

}

-- rule Brannch {
--	from
--		s : GAST!Branch
--	to 
--		t : CFG!Node (
----			toNode <- s.statement.next
--		var <- s.statement.accesses->select(e | e.oclIsKindOf(GAST!VariableAccess))->collect(c | c.accessedTarget)->select(e2| e2.oclIsKindOf(GAST!LocalVariable))
--
--		)
--}


 rule LocalVariable2Var {
	from
		s : GAST!LocalVariable
	to 
		t : CFG!Var (
			name <- s.simpleName
			
		)
}


--rule ExpressionStatement  extends Statement2Node {
--	from
--		s : GAST!GASTExpression
--	to 
--		t : CFG!ConditionalNode (
--			toNode <- s.annotations.
--		)
--}
